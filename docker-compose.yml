version: '2.1'

services:
  eureka-server:
    build: eureka-server/
    restart: always
    network_mode: host
    hostname: localhost
    image: eureka-server
    container_name: eureka
    ports:
      - 8761:8761
    healthcheck:
      test: "exit 0"

  config-server:
    build: config-server/
    restart: always
    network_mode: host
    image: config-server
    container_name: configserver
    hostname: localhost
    ports:
      - 8888:8888
    healthcheck:
      test: "exit 0"

  zuul-api:
    build: zuul-api/
    depends_on:
      - config-server
      - eureka-server
    restart: always
    network_mode: host
    image: zuul-api
    hostname: localhost
    ports:
      - 8080:8080
    healthcheck:
      test: "exit 0"

  mongo:
    image: mongo:latest
    ports:
      - 27017:27017
    container_name: mongo
    network_mode: host
    hostname: localhost
    restart: always
    healthcheck:
      test: "exit 0"

  mysql:
      image: mysql:latest
      ports:
        - 3306:3306
      command: --default-authentication-plugin=mysql_native_password
      environment:
        MYSQL_ROOT_PASSWORD: root
      container_name: mysql
      network_mode: host
      hostname: localhost
      restart: always
      healthcheck:
        test: "exit 0"

  user-service:
    build: user-service/
    depends_on:
      - mongo
      - config-server
      - eureka-server
      - zuul-api
    restart: always
    network_mode: host
    container_name: userregistration
    image: user
    hostname: localhost
    ports:
      - 8192:8192
    healthcheck:
      test: "exit 0"

  #  recomendation-service :
  #   build: neo4j/
  #   depends_on:
  #     - consumer-service
  #     - designer-service
  #     - supplier-service
  #     - manufacturer-service
  #     - user-service
  #   restart: always
  #   network_mode: host
  #   container_name: neo4j
  #   image: neo4j
  #   hostname: localhost
  #   ports:
  #     - 8191:8191
  #   healthcheck:
  #     test: "exit 0"

  manufacturer-service:
    build: manufacturer-service/
    depends_on:
      - mongo
      - user-service
    restart: always
    network_mode: host
    container_name: manufacturer
    image: manufacturer_image
    hostname: localhost
    ports:
      - 8189:8189
    healthcheck:
      test: "exit 0"

  supplier-service:
    build: supplier-service/
    depends_on:
      - mongo
      - user-service
    restart: always
    network_mode: host
    container_name: supplier
    image: supplier_image
    hostname: supplier
    ports:
      - 8188:8188
    healthcheck:
      test: "exit 0"
      
  designer-service:
    build: designer-service/
    depends_on:
      - mongo
      - user-service
      - manufacturer-service
      - supplier-service
    restart: always
    network_mode: host
    container_name: designer
    image: designer_image
    hostname: designer
    ports:
      - 8187:8187
    healthcheck:
      test: "exit 0"
      
  consumer-service:
    build: consumer-service/
    depends_on:
      - mongo
      - user-service
    restart: always
    network_mode: host
    container_name: consumer
    image: consumer
    hostname: consumer
    ports:
      - 8190:8190
    healthcheck:
      test: "exit 0"

  login-service:
    build: login-service/
    depends_on:
      - mysql
      - user-service
    restart: always
    network_mode: host
    container_name: login
    image: login
    hostname: login
    ports:
      - 8193:8193
    healthcheck:
      test: "exit 0"

  reports-service:
    build: reports-service/
    depends_on:
      - mongo
      - user-service
      - consumer-service
      - designer-service
    restart: always
    network_mode: host
    container_name: reports
    image: reports
    hostname: reports
    ports:
      - 8195:8195
    healthcheck:
      test: "exit 0"
  
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    network_mode: host
    hostname: localhost
    ports:
      - 2181:2181
    restart: always
    healthcheck:
      test: "exit 0"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    network_mode: host
    hostname: localhost
    ports:
      - 9096:9096
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CREATE_TOPICS: "Kafka_Example, Kafka_Example1, Kafka_Example2, Login"
    restart: always
    healthcheck:
      test: "exit 0"

  workflow-service:
    build: workflow-service/
    depends_on:
      - mongo
      - user-service
    restart: always
    network_mode: host
    container_name: workflow
    image: workflow
    hostname: workflow
    ports:
      - 8194:8194
    healthcheck:
      test: "exit 0"

  fashionretail-frontend:
    build: fashionretail-frontend/
    restart: always
    network_mode: host
    container_name: angular-app
    image: fashionretail
    hostname: fashionretail
    ports:
      - 4201:4201
    healthcheck:
      test: "exit 0"

